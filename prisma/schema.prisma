// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  phone        String?
  passwordHash String?
  role         String    @default("user") // user, premium, admin
  verified     Boolean   @default(false)
  premiumUntil DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  properties   Property[]
  conversations Conversation[]
  messages     Message[]
  notifications Notification[]
  payments     Payment[]
  favorites    Favorite[]
  devices      Device[]
}

model Property {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  currency    String   @default("MZN")
  type        String   // apartment, house, land, commercial
  listingType String   // sale, rent
  bedrooms    Int?
  bathrooms   Int?
  area        Float
  location    Json     // { province, city, neighborhood, address, coordinates }
  amenities   String[] // pool, garage, garden, security, etc.
  images      String[] // URLs to images
  featured    Boolean  @default(false)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  // Relations
  owner       User      @relation(fields: [ownerId], references: [id])
  favorites   Favorite[]
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
}

model Message {
  id             String   @id @default(cuid())
  content        String
  read           Boolean  @default(false)
  createdAt      DateTime @default(now())
  conversationId String
  senderId       String
  receiverId     String

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  body      String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id           String   @id @default(cuid())
  amount       Float
  currency     String   @default("MZN")
  method       String   // mpesa, emola
  status       String   // pending, completed, failed
  description  String
  transactionId String?
  createdAt    DateTime @default(now())
  userId       String

  // Relations
  user         User     @relation(fields: [userId], references: [id])
}

model Favorite {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  userId     String
  propertyId String

  // Relations
  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
}

model Device {
  id        String   @id @default(cuid())
  token     String   @unique
  platform  String?  // ios, android, web
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

model Settings {
  id             String  @id @default(cuid())
  userId         String  @unique
  newMessages    Boolean @default(true)
  propertyViews  Boolean @default(true)
  paymentUpdates Boolean @default(true)
  promotions     Boolean @default(true)
}
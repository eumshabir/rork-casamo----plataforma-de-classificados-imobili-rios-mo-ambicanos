// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  phone         String?
  passwordHash  String
  role          UserRole  @default(user)
  verified      Boolean   @default(false)
  premiumUntil  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  properties    Property[]
  sentMessages     Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  notifications    Notification[]
  payments         Payment[]
  favorites        Favorite[]
}

enum UserRole {
  user
  premium
  admin
}

model Property {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  type        String
  listingType String
  bedrooms    Int?
  bathrooms   Int?
  area        Float?
  featured    Boolean  @default(false)
  boostedUntil DateTime?
  amenities   String[]
  images      String[]
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Location
  province    String
  city        String
  neighborhood String?
  address     String?
  latitude    Float?
  longitude   Float?

  // Relations
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  favorites   Favorite[]
  
  @@index([ownerId])
  @@index([type])
  @@index([listingType])
  @@index([province, city])
  @@index([featured])
}

model Conversation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  messages    Message[]
}

model Message {
  id             String       @id @default(cuid())
  content        String
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  
  // Relations
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  receiverId     String
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  
  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  body      String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Payment {
  id            String   @id @default(cuid())
  amount        Float
  currency      String
  method        String
  status        String
  description   String
  transactionId String?
  reference     String?
  createdAt     DateTime @default(now())
  
  // Relations
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([status])
}

model Favorite {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  
  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, propertyId])
  @@index([userId])
  @@index([propertyId])
}

model NotificationSettings {
  id             String  @id @default(cuid())
  userId         String  @unique
  newMessages    Boolean @default(true)
  propertyViews  Boolean @default(true)
  paymentUpdates Boolean @default(true)
  promotions     Boolean @default(true)
}

model DeviceToken {
  id        String   @id @default(cuid())
  token     String   @unique
  platform  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
}